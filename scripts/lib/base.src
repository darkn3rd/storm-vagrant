#!/usr/bin/env bash
# NAME: common.src
# AUTHOR: Joaquin Menchaca
# CREATED: 2016-08-06
# UPDATED:
#   * 2016-09-07 Fixed bug with parameter checking
# PURPOSE: Library for configuring ssh config and hosts file for vagrant systems
#
# NOTES:
#   * These functions need to run on the virtual guest system
#
# FUNCTIONS LIST:
#  SSH & Hosts Configuration:
#   * get_hostnames()
#   * get_hostname()
#   * get_ipaddress()
#   * config_ssh()
#   * config_hosts()
#   * install_utilities()
#  VIM and other Tools:
#   * install_utilities()

. ${SCRIPTLIB}/common.src

#######
# get_hostnames()
#
# description: prints list of hosts from given file
# usage: get_hostnames $CONFIGFILE
##########################################
get_hostnames () {
  [ $# -ne 1 ] && \
    { echo "USAGE: get_hostnames [config_file]"; return 1; }

  CONFIGFILE=$1
   [ -e ${CONFIGFILE} ] || \
     { echo "ERROR: ${CONFIGFILE} doesn't exist."; return 2; }

  echo $(tr -s ' ' < "${CONFIGFILE}" | cut -d ' ' -f2) # return second column

}

#######
# get_hostname()
#
# description: fetches exact host name from search pattern
# usage: get_hostname $CONFIGFILE $SEARCH_PATTERN
##########################################
get_hostname () {
  [ $# -ne 2 ] && \
    { echo "USAGE: get_hostnames [config_file] [search_pattern]"; return 1; }

  CONFIGFILE=$1
  SEARCH=$2

  [ -e ${CONFIGFILE} ] || \
     { echo "ERROR: ${CONFIGFILE} doesn't exist."; return 2; }

  echo $(tr -s ' ' < "${CONFIGFILE}" | cut -d ' ' -f2 | grep "${SEARCH}")

}


#######
# get_ipaddress()
#
# description: prints ipaddress given configfile path and hostname
# usage: get_ipaddress $CONFIGFILE $HOSTNAME
##########################################
get_ipaddress () {
  [ $# -ne 2 ] && \
    { echo "USAGE: get_ipaddress [config_file] [hostname]"; return 1; }

  HOST_NAME=$2
  CONFIGFILE=$1

  [ -e ${CONFIGFILE} ] || \
    { echo "ERROR: ${CONFIGFILE} doesn't exist."; return 2; }

  echo $(tr -s ' ' < "${CONFIGFILE}" | grep -F "${HOST_NAME}" | cut -d ' ' -f1)

}

#######
# config_ssh()
#
# description: configures ssh_config given configuration file path
# usage: config_ssh $CONFIGFILE
##########################################
config_ssh () {
  [ $# -le 1 ] || \
    { echo "ERROR: Must supply configfile as parameter"; return 1; }

  CONFIGFILE=${1}
  SSH_CONFIG=${2:-"/etc/ssh/ssh_config"}
  HOSTS="$(get_hostnames ${CONFIGFILE})"

  ##### Local Variables
  cp /dev/null ${SSH_CONFIG}

  for HOST in ${HOSTS}; do
    # Reference Identity File
    # Prerequisite:
    #   * local directory on host　must be mounted on guest system as
    #　  　/vagrant (default behavior)
    #   * guest-edtitions drivers must be installed on guest
    # Note: Refer to default Vagrant beahavior, as private_key created at time of
    #       machine creation
    IDENTITYFILE="/vagrant/.vagrant/machines/${HOST}/virtualbox/private_key"

    if ! grep -qF "Host ${HOST}" ${SSH_CONFIG}; then
      ### CREATE GLOBAL SSH CONFIG
      cat <<- CONFIG_EOF >> ${SSH_CONFIG}
  Host ${HOST}
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    IdentitiesOnly yes
    User vagrant
    IdentityFile ${IDENTITYFILE}
    PasswordAuthentication no
CONFIG_EOF
    fi
  done

}

#######
# config_hosts()
#
# description: configures hosts given configuration file path
# usage: config_hosts $CONFIGFILE
##########################################
config_hosts () {
  [ $# -le 1 ] || \
    { echo "ERROR: Must supply configfile as parameter"; return 1; }

  CONFIGFILE=${1}
  HOSTS_FILE=${2:-"/etc/hosts"}
  HOSTS="$(get_hostnames ${CONFIGFILE})"

  for HOST in ${HOSTS}; do
    #if [ "$(hostname -f)" = "${HOST}" ]; then continue; fi
    ### APPEND TO HOSTS IF EXACT ENTRY NOT EXIST
    IPADDRESS=$(get_ipaddress ${CONFIGFILE} ${HOST})
    grep -Fq "${IPADDRESS} ${HOST}" ${HOSTS_FILE} || echo "${IPADDRESS} ${HOST}" >> ${HOSTS_FILE}
  done
}

#######
# install_utilities()
#
# description: install vim + other utilities, and configure vim
##########################################
install_utilities() {
  OS_FAMILY=$(grep ID_LIKE /etc/os-release | grep -oP '[a-z]*' | head -1)

  if [ ${OS_FAMILY} = "rhel" ]; then
    yum install -y -q tree curl unzip vim
  elif [ ${OS_FAMILY} = "debian" ]; then
    apt-get -y -q install tree curl unzip vim
  else
    error "ERROR: OS Family not supported."
  fi

  # Enable Color Syntax Highlighting
  cat <<-VIMRC_EOF > /home/vagrant/.vimrc
filetype plugin indent on
syntax on
colorscheme delek
VIMRC_EOF

}
